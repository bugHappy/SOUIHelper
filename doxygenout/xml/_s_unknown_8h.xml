<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="_s_unknown_8h" kind="file" language="C++">
    <compoundname>SUnknown.h</compoundname>
    <includedby refid="_s_wnd_accessible_8h" local="no">H:/OpenSourcesCode/soui3/SOUI/include/core/SWndAccessible.h</includedby>
    <invincdepgraph>
      <node id="1">
        <label>H:/OpenSourcesCode/soui3/SOUI/include/helper/SUnknown.h</label>
        <link refid="_s_unknown_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>H:/OpenSourcesCode/soui3/SOUI/include/core/SWndAccessible.h</label>
        <link refid="_s_wnd_accessible_8h_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="class_s_unknown" prot="public">SUnknown</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="_s_unknown_8h_1afecd2c16fa6726e4e38f4994317b84bb" prot="public" static="no">
        <name>IUNKNOWN_BEGIN2</name>
        <param><defname>iid</defname></param>
        <param><defname>cls</defname></param>
        <initializer>	STDMETHODIMP_(ULONG) AddRef(void)\
	{\
		return _AddRef();\
	}\
	STDMETHODIMP_(ULONG) Release(void)\
	{\
		return _Release();\
	}\
	STDMETHODIMP QueryInterface(REFIID riid, void **ppvObj)\
	{\
		if (ppvObj == NULL)\
			return E_INVALIDARG;\
		*ppvObj = NULL;\
		if(IsEqualIID(riid,iid) || IsEqualIID(riid,IID_IUnknown))\
		{\
			*ppvObj=(cls *)this;\
		}\</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="H:/OpenSourcesCode/soui3/SOUI/include/helper/SUnknown.h" line="4" column="9" bodyfile="H:/OpenSourcesCode/soui3/SOUI/include/helper/SUnknown.h" bodystart="4" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_s_unknown_8h_1a8e9925f2f8513eb02361a0e2a1b21497" prot="public" static="no">
        <name>IUNKNOWN_ADD_IID2</name>
        <param><defname>iid</defname></param>
        <param><defname>cls</defname></param>
        <initializer>	if(IsEqualIID(riid,iid))\
	{\
		*ppvObj=(cls *)this;\
	}\</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="H:/OpenSourcesCode/soui3/SOUI/include/helper/SUnknown.h" line="23" column="9" bodyfile="H:/OpenSourcesCode/soui3/SOUI/include/helper/SUnknown.h" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_s_unknown_8h_1a5c3e2db14679fbe30c87640bebe997c4" prot="public" static="no">
        <name>IUNKNOWN_END</name>
        <param></param>
        <initializer>	if (*ppvObj)\
	{\
		AddRef();\
		return S_OK;\
	}\
	return E_NOINTERFACE;\
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="H:/OpenSourcesCode/soui3/SOUI/include/helper/SUnknown.h" line="29" column="9" bodyfile="H:/OpenSourcesCode/soui3/SOUI/include/helper/SUnknown.h" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_s_unknown_8h_1a66b2637be5b84abfefea6e7a3203e4c1" prot="public" static="no">
        <name>IUNKNOWN_BEGIN</name>
        <param><defname>iface</defname></param>
        <initializer>IUNKNOWN_BEGIN2(__uuidof(iface),iface)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="H:/OpenSourcesCode/soui3/SOUI/include/helper/SUnknown.h" line="38" column="9" bodyfile="H:/OpenSourcesCode/soui3/SOUI/include/helper/SUnknown.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_s_unknown_8h_1a408cc00f1397fc3d30748a61304f1b11" prot="public" static="no">
        <name>IUNKNOWN_ADD_IID</name>
        <param><defname>iface</defname></param>
        <initializer>IUNKNOWN_ADD_IID2(__uuidof(iface),iface)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="H:/OpenSourcesCode/soui3/SOUI/include/helper/SUnknown.h" line="41" column="9" bodyfile="H:/OpenSourcesCode/soui3/SOUI/include/helper/SUnknown.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_s_unknown_8h_1a2f0cdb4f69e2f07741bd5b05a10bf715" prot="public" static="no">
        <name>SOUI_EXP</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="H:/OpenSourcesCode/soui3/SOUI/include/helper/SUnknown.h" line="45" column="9" bodyfile="H:/OpenSourcesCode/soui3/SOUI/include/helper/SUnknown.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IUNKNOWN_BEGIN2(iid,cls<sp/>)<sp/>\</highlight></codeline>
<codeline lineno="5"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>STDMETHODIMP_(ULONG)<sp/>AddRef(void)\</highlight></codeline>
<codeline lineno="6"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{\</highlight></codeline>
<codeline lineno="7"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>_AddRef();\</highlight></codeline>
<codeline lineno="8"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="9"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>STDMETHODIMP_(ULONG)<sp/>Release(void)\</highlight></codeline>
<codeline lineno="10"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{\</highlight></codeline>
<codeline lineno="11"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>_Release();\</highlight></codeline>
<codeline lineno="12"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="13"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>STDMETHODIMP<sp/>QueryInterface(REFIID<sp/>riid,<sp/>void<sp/>**ppvObj)\</highlight></codeline>
<codeline lineno="14"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{\</highlight></codeline>
<codeline lineno="15"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(ppvObj<sp/>==<sp/>NULL)\</highlight></codeline>
<codeline lineno="16"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>E_INVALIDARG;\</highlight></codeline>
<codeline lineno="17"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*ppvObj<sp/>=<sp/>NULL;\</highlight></codeline>
<codeline lineno="18"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(IsEqualIID(riid,iid)<sp/>||<sp/>IsEqualIID(riid,IID_IUnknown))\</highlight></codeline>
<codeline lineno="19"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{\</highlight></codeline>
<codeline lineno="20"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*ppvObj=(cls<sp/>*)this;\</highlight></codeline>
<codeline lineno="21"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="22"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IUNKNOWN_ADD_IID2(iid,cls)<sp/>\</highlight></codeline>
<codeline lineno="24"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if(IsEqualIID(riid,iid))\</highlight></codeline>
<codeline lineno="25"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{\</highlight></codeline>
<codeline lineno="26"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*ppvObj=(cls<sp/>*)this;\</highlight></codeline>
<codeline lineno="27"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="28"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IUNKNOWN_END()<sp/>\</highlight></codeline>
<codeline lineno="30"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(*ppvObj)\</highlight></codeline>
<codeline lineno="31"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{\</highlight></codeline>
<codeline lineno="32"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AddRef();\</highlight></codeline>
<codeline lineno="33"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>S_OK;\</highlight></codeline>
<codeline lineno="34"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="35"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>E_NOINTERFACE;\</highlight></codeline>
<codeline lineno="36"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IUNKNOWN_BEGIN(iface<sp/>)<sp/>\</highlight></codeline>
<codeline lineno="39"><highlight class="preprocessor">IUNKNOWN_BEGIN2(__uuidof(iface),iface)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IUNKNOWN_ADD_IID(iface)<sp/>\</highlight></codeline>
<codeline lineno="42"><highlight class="preprocessor">IUNKNOWN_ADD_IID2(__uuidof(iface),iface)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>SOUI_EXP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SOUI_EXP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#endif//SOUI_EXP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="class_s_unknown" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SOUI_EXP<sp/><ref refid="class_s_unknown" kindref="compound">SUnknown</ref></highlight></codeline>
<codeline lineno="49"><highlight class="normal">{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_unknown" kindref="compound">SUnknown</ref>():m_cRef(1)</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="class_s_unknown" kindref="compound">SUnknown</ref>(){}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OnFinalRelease(){}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>STDMETHODIMP_(ULONG)<sp/>_AddRef(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(ULONG)InterlockedIncrement(&amp;m_cRef);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>STDMETHODIMP_(ULONG)<sp/>_Release(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LONG<sp/>ret<sp/>=<sp/>InterlockedDecrement(&amp;m_cRef);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ret<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OnFinalRelease();</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>LONG<sp/>GetRef()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_cRef;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>LONG<sp/>m_cRef;</highlight></codeline>
<codeline lineno="82"><highlight class="normal">};</highlight></codeline>
    </programlisting>
    <location file="H:/OpenSourcesCode/soui3/SOUI/include/helper/SUnknown.h"/>
  </compounddef>
</doxygen>
